#!/usr/bin/python3
import os, sys, shutil, argparse
from pathlib import Path
from datetime import date

flatpak = os.path.exists("/.flatpak-info")
snap = os.environ.get('SNAP_NAME', '') == 'savedesktop'

# Cache directory
CACHE = f"{Path.home()}/.var/app/io.github.vikdevelop.SaveDesktop/cache/tmp" if flatpak else f"{os.getenv('SNAP_USER_COMMON')}/.cache/tmp" if snap else f"{Path.home()}/.cache/io.github.vikdevelop.SaveDesktop"

# Init dir for loading the Python scripts
init_dir = "/app" if flatpak else f"{os.getenv('SNAP')}/usr" if snap else f"{Path.home()}/.local/share/savedesktop/src"
sys.path.append(init_dir)

# Command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("--background", action="store_true", help="Start periodic saving")
parser.add_argument("--sync", action="store_true", help="Sync a desktop configuration")
parser.add_argument("--save-now", action="store_true", help="Save a configuration using UI parameters (learn more: https://vikdevelop.github.io/SaveDesktop/wiki/saving-importing-configuration-in-cli/en#saving-configuration)")
parser.add_argument("--save-without-archive", type=str, help="Save a configuration without an archive", dest="FOLDER_PATH")
parser.add_argument("--import-config", help="Import a configuration from a file (learn more: https://vikdevelop.github.io/SaveDesktop/wiki/saving-importing-configuration-in-cli/en#importing-configuration)", type=str, dest="CFG_ARCHIVE_PATH")
cmd = parser.parse_args()

# Run Python scripts from the listed command-line arguments
if cmd.background: # start periodic saving
    from periodic_saving import PeriodicBackups
    pb = PeriodicBackups()
    pb.run(None)
    exit()
elif cmd.sync: # sync a desktop configuration
    from synchronization import Syncing
    exit()
elif cmd.save_now: # save a configuration using UI parameters
    from periodic_saving import PeriodicBackups
    pb = PeriodicBackups()
    pb.run(now=True)
    exit()
elif cmd.FOLDER_PATH: # save a configuration without an archive
    folder_path = cmd.FOLDER_PATH
    os.makedirs(f"{CACHE}/save_config", exist_ok=True)
    os.chdir(f"{CACHE}/save_config")
    os.system(f"python3 {init_dir}/config.py --save")
    print(f"moving the configuration folder to the {folder_path} folder")
    os.system(f"echo > {CACHE}/save_config/SELECT_THIS_FILE_TO_IMPORT_CFG && mv {CACHE}/save_config '{cmd.FOLDER_PATH}/configuration_{date.today()}'")
elif cmd.CFG_ARCHIVE_PATH: # import a configuration from a file, or folder
    file_path = cmd.CFG_ARCHIVE_PATH
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        exit(1)
    
    shutil.rmtree(os.path.join(CACHE, "import_config"), ignore_errors=True)
    os.makedirs(os.path.join(CACHE, "import_config"), exist_ok=True)
    os.chdir(os.path.join(CACHE, "import_config"))
    
    if file_path.endswith('.sd.zip'):
        os.system(f"unzip {file_path}")
    elif file_path.endswith('.sd.tar.gz'):
        os.system(f"tar -xf {file_path}")
    elif file_path.endswith('SELECT_THIS_FILE_TO_IMPORT_CFG'):
        shutil.copytree(self.import_file[:-31], f"{CACHE}/import_config", dirs_exist_ok=True, ignore_dangling_symlinks=True)
    else:
        print("Unsupported file type. Use *.sd.tar.gz, *.sd.zip or /path/to/SELECT_THIS_FILE_TO_IMPORT_CFG.")
        exit(1)
    
    os.system(f"python3 {init_dir}/config.py --import_")
    exit()
else: # show the app window
    import main_window
